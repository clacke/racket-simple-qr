#lang racket

(require rackunit/text-ui)

(require rackunit "lib.rkt")

(define test-lib
  (test-suite 
   "test-lib"

   (test-case
    "test-get-encoded-data-group-from-bit-string"

    (check-equal? (get-encoded-data-group-from-bit-string
                   (string-append
                    "0100001101010101010001101000011001010111001001100101010111000010"
                    "0111011100110010000001100001001000000110011001110010011011110110"
                    "1111011001000010000001110111011010000110111100100000011100100110"
                    "0101011000010110110001101100011110010010000001101011011011100110"
                    "1111011101110111001100100000011101110110100001100101011100100110"
                    "0101001000000110100001101001011100110010000001110100011011110111"
                    "0111011001010110110000100000011010010111001100100001000011101100"
                    "000100011110110000010001111011000001000111101100")
                   5
                   "Q")
                  '(
                    (
                     ((67 85 70 134 87 38 85 194 119 50 6 18 6 103 38) (213 199 11 45 115 247 241 223 229 248 154 117 154 111 86 161 111 39))
                     ((246 246 66 7 118 134 242 7 38 86 22 198 199 146 6) (87 204 96 60 202 182 124 157 200 134 27 129 209 17 163 163 120 133))
                     )
                    
                    (
                     ((182 230 247 119 50 7 118 134 87 38 82 6 134 151 50 7) (148 116 177 212 76 133 75 242 238 76 195 230 189 10 108 240 192 141))
                     ((70 247 118 86 194 6 151 50 16 236 17 236 17 236 17 236) (235 159 5 173 24 147 59 33 106 40 255 172 82 2 131 32 178 236))
                     )))
    )

   (test-case
    "test-get-encoded-data-group"

    (check-equal? (get-encoded-data-group "HELLO WORLD" #:mode "B" #:error_level "Q")
                  '(
                    (
                     ((64 182 22 241 162 229 184 154 134 128 236 17 236) (226 72 61 197 59 131 141 121 211 142 220 100 152))
                     )
                    ()))
    )

   (test-case
    "test-interleave-data-group"
    
    (check-equal? (interleave-data-group
                   (get-encoded-data-group-from-bit-string
                    (string-append
                     "0100001101010101010001101000011001010111001001100101010111000010"
                     "0111011100110010000001100001001000000110011001110010011011110110"
                     "1111011001000010000001110111011010000110111100100000011100100110"
                     "0101011000010110110001101100011110010010000001101011011011100110"
                     "1111011101110111001100100000011101110110100001100101011100100110"
                     "0101001000000110100001101001011100110010000001110100011011110111"
                     "0111011001010110110000100000011010010111001100100001000011101100"
                     "000100011110110000010001111011000001000111101100")
                    5
                    "Q"))

                  '(67 246 182 70 85 246 230 247 70 66 247 118 134 7 119 86 87 118 50 194 38 134 7 6 85 242 118 151 194 7 134 50 119 38 87 16 50 86 38 236 6 22 82 17 18 198 6 236 6 199 134 17 103 146 151 236 38 6 50 17 7 236 213 87 148 235 199 204 116 159 11 96 177 5 45 60 212 173 115 202 76 24 247 182 133 147 241 124 75 59 223 157 242 33 229 200 238 106 248 134 76 40 154 27 195 255 117 129 230 172 154 209 189 82 111 17 10 2 86 163 108 131 161 163 240 32 111 120 192 178 39 133 141 236))
    )

   ))

(run-tests test-lib)
